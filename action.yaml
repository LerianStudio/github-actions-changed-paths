name: 'Get changed paths'

inputs:
  filter_paths:
    required: false
    description: 'Optional. JSON array of path prefixes to filter results (e.g., ["components/mdz", "components/transaction"])'
  path_level:
    required: false
    description: 'Optional. Limits the path to the first N segments (e.g., 2 -> "components/transactions")'
  get_app_name:
    required: false
    description: 'If true, outputs a matrix of objects with app name and working directory. Otherwise, outputs a list of changed directories.'
  app_name_prefix:
    required: false
    description: 'Optional. If set and get_app_name is true, this prefix will be added to each app name.'

outputs:
  matrix:
    description: 'JSON array of changed directories'
    value: ${{ steps.dirs.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed
      shell: bash
      run: |
        FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        printf "files<<EOF\n%s\nEOF\n" "$FILES" >> "$GITHUB_OUTPUT"

    - name: Extract changed directories
      id: dirs
      shell: bash
      run: |
        FILES="${{ steps.changed.outputs.files }}"
        FILTER_PATHS="${{ inputs.filter_paths || '' }}"
        PATH_LEVEL="${{ inputs.path_level || '' }}"
        GET_APP_NAME="${{ inputs.get_app_name || 'false' }}"
        APP_NAME_PREFIX="${{ inputs.app_name_prefix || '' }}"

        if [[ -z "$FILES" ]]; then
          echo "No files changed."
          printf "matrix=[]\n" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # Get directory for each file
        DIRS=$(echo "$FILES" | xargs -n1 dirname)

        # Trim to first N path segments if specified
        if [[ -n "$PATH_LEVEL" ]]; then
          echo "Trimming paths to first $PATH_LEVEL segments"
          DIRS=$(echo "$DIRS" | cut -d'/' -f-"$PATH_LEVEL")
        fi

        # Filter paths if filter_paths is provided
        if [[ -n "$FILTER_PATHS" ]]; then
          echo "Filtering directories using list:"
          echo "$FILTER_PATHS"

          # Convert multi-line input into array
          mapfile -t FILTER_ARRAY <<< "$FILTER_PATHS"

          FILTERED=""
          while read -r DIR; do
            for FILTER in "${FILTER_ARRAY[@]}"; do
              if [[ "$DIR" == "$FILTER"* ]]; then
                FILTERED+="$DIR"$'\n'
                break
              fi
            done
          done <<< "$DIRS"

          # If nothing matched, exit
          if [[ -z "$FILTERED" ]]; then
            echo "No matching directories found after filtering."
            printf "matrix=[]\n" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          DIRS="$FILTERED"
        fi

        # Deduplicate and remove empty lines
        DIRS=$(echo "$DIRS" | grep -v '^$' | sort -u)

        if [[ "$GET_APP_NAME" == "true" ]]; then
          echo "Generating object matrix with app names"
          MATRIX="["
          FIRST=true
          while read -r DIR; do
            if [[ -n "$APP_NAME_PREFIX" ]]; then
              APP_NAME="${APP_NAME_PREFIX}-$(echo "$DIR" | cut -d'/' -f2)"
            else
              APP_NAME="$(echo "$DIR" | cut -d'/' -f2)"
            fi
            ENTRY="{\"name\":\"$APP_NAME\",\"working_dir\":\"$DIR\"}"
            if $FIRST; then
              MATRIX+="$ENTRY"
              FIRST=false
            else
              MATRIX+=",$ENTRY"
            fi
          done <<< "$DIRS"
          MATRIX+="]"
        else
          # Default: return just an array of paths
          MATRIX=$(echo "$DIRS" | jq -Rc . | jq -sc .)
        fi

        echo "Changed directories matrix: $MATRIX"
        printf "matrix=%s\n" "$MATRIX" >> "$GITHUB_OUTPUT"
