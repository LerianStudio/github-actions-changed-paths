name: 'Get changed paths'

inputs:
  filter_paths:
    required: false
    description: 'Optional. JSON array of path prefixes to filter results (e.g., ["components/mdz", "components/transaction"])'
  path_level:
    required: false
    description: 'Optional. Limits the path to the first N segments (e.g., 2 -> "components/transactions")'

outputs:
  matrix:
    description: 'JSON array of changed directories'
    value: ${{ steps.dirs.outputs.matrix }}

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get changed files
      id: changed
      shell: bash
      run: |
        FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})
        printf "files<<EOF\n%s\nEOF\n" "$FILES" >> "$GITHUB_OUTPUT"

    - name: Extract changed directories
      id: dirs
      shell: bash
      run: |
        FILES="${{ steps.changed.outputs.files }}"
        FILTER_PATHS="${{ inputs.filter_paths || '' }}"
        PATH_LEVEL="${{ inputs.path_level || '' }}"

        if [[ -z "$FILES" ]]; then
          echo "No files changed."
          printf "matrix=[]\n" >> "$GITHUB_OUTPUT"
          exit 0
        fi

        # Get directory for each file
        DIRS=$(echo "$FILES" | xargs -n1 dirname)

        # Trim to first N path segments if specified
        if [[ -n "$PATH_LEVEL" ]]; then
          echo "Trimming paths to first $PATH_LEVEL segments"
          DIRS=$(echo "$DIRS" | cut -d'/' -f-"$PATH_LEVEL")
        fi

        # Filter paths if filter_paths is a non-empty JSON array
        if [[ "$FILTER_PATHS" != "" && "$FILTER_PATHS" != "[]" ]]; then
          echo "Filtering directories using list: $FILTER_PATHS"
          FILTERED=""
          while read -r DIR; do
            for FILTER in $(echo "$FILTER_PATHS" | jq -r '.[]'); do
              if [[ "$DIR" == "$FILTER"* ]]; then
                FILTERED+="$DIR"$'\n'
                break
              fi
            done
          done <<< "$DIRS"
          DIRS="$FILTERED"
        fi

        # Deduplicate and convert to compact JSON array
        DIRS_JSON=$(echo "$DIRS" | sort -u | jq -Rc . | jq -sc .)

        echo "Changed directories matrix: $DIRS_JSON"
        printf "matrix=%s\n" "$DIRS_JSON" >> "$GITHUB_OUTPUT"
